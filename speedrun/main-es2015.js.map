{"version":3,"sources":["./src/app/services/auth.guard.ts","./src/app/studio/studio-main-page.component.html","./src/app/studio/studio-main-page.component.ts","./src/app/home/home.component.html","./src/app/home/home.component.ts","./src/app/studio/studio-new.component.ts","./src/app/studio/studio-new.component.html","./src/navbar/navbar.component.html","./src/navbar/navbar.component.ts","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/services/studio.service.ts","./src/app/app.module.ts","./src/app/services/auth.service.ts","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/environments/environment.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(private router: Router, private afAuth: AngularFireAuth) {\r\n\r\n    }\r\n\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.afAuth.onAuthStateChanged((user) => {\r\n                if (user) {\r\n\r\n                    // if (!user.emailVerified)                            // if the user hasn't verified their email, send them to that page\r\n                    //     this.router.navigate(['/verify-email']);\r\n\r\n                    resolve(true);\r\n                } else {\r\n                    console.log('Auth Guard: user is not logged in');\r\n                    this.router.navigate(['/']);                   // a logged out user will always be sent to home\r\n                    resolve(false);\r\n                }\r\n            });\r\n        });\r\n    }\r\n  \r\n}\r\n","\r\n<div class=\"main-content\">\r\n  <div class=\"blurred-background\"></div>\r\n  <div class=\"studio-card\" *ngFor=\"let studio of presentedStudios\">\r\n    <h3>{{ studio.studioName}}</h3>\r\n    <p><strong>Lokalizacja:</strong> {{ studio.location }}</p>\r\n    <p><strong>Właściciel:</strong> {{ studio.ownerUsername }}</p>\r\n  \r\n    <h4>Usługi:</h4>\r\n    <ul>\r\n      <li *ngFor=\"let service of studio.service\">\r\n        <h5>{{ service.title }}</h5>\r\n        <p>{{ service.description }}</p>\r\n  \r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Studio } from '../services/model/studio.model';\r\nimport { StudioService } from '../services/studio.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n\r\n@Component({\r\n    selector: 'app-studio-main-page',\r\n    templateUrl: './studio-main-page.component.html',\r\n    styleUrls: ['./studio-main-page.component.css']\r\n})\r\nexport class StudioMainPageComponent implements OnInit {\r\n    hairdresserType : String = \"hairdresser\";\r\n    makeupType : String = \"makeup\";\r\n    allType : String = 'all';\r\n    presentedStudios: Studio[] = [];\r\n    allStudios : Studio[] = [];\r\n    hairdresserStudios: Studio[] = [];\r\n    makeupStudios: Studio[] = [];\r\n    studioType: String;\r\n    constructor(private studioService: StudioService,private route: ActivatedRoute){\r\n        this.studioService.getStudios().subscribe((s) => {\r\n            this.presentedStudios = s;\r\n            this.allStudios = s;\r\n            if(this.studioType === this.makeupType){\r\n                this.loadMakeupStudios();\r\n             }\r\n\r\n             if(this.studioType === this.hairdresserType){\r\n                this.loadHairdresserStudios();\r\n             }\r\n          });\r\n        \r\n    }\r\n    \r\n    ngOnInit(): void {\r\n        this.route.paramMap.subscribe(params => {\r\n             this.studioType = params.get('studioType');\r\n             if(this.studioType === this.makeupType){\r\n                this.loadMakeupStudios();\r\n             }\r\n\r\n             if(this.studioType === this.hairdresserType){\r\n                this.loadHairdresserStudios();\r\n             }\r\n\r\n             if(this.studioType === this.allType){\r\n                this.loadAllStudios();\r\n             }\r\n           \r\n        });\r\n    }\r\n\r\n    private loadHairdresserStudios(){\r\n        this.presentedStudios = this.allStudios.filter(studio => studio.type === this.hairdresserType);\r\n    }\r\n\r\n   \r\n    private loadMakeupStudios(){\r\n        this.presentedStudios = this.allStudios.filter(studio => studio.type === this.makeupType);\r\n    }\r\n\r\n    private loadAllStudios(){\r\n        this.presentedStudios = this.allStudios;\r\n    }\r\n    \r\n    getStudios(){\r\n\r\n    }\r\n\r\n}","\r\n<div *ngIf=\"(afAuth.user | async)\">\r\n    User is logged in\r\n\r\n    <br>\r\n    \r\n</div>\r\n<div *ngIf=\"!(afAuth.user | async)\">\r\n    User is not logged in\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\n@Component({\r\n    selector: 'app-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n    constructor(public afAuth: AngularFireAuth) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    logout(): void {\r\n        this.afAuth.signOut();\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Studio } from '../services/model/studio.model';\r\nimport { StudioService } from '../services/studio.service';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n    selector: 'app-studio-new',\r\n    templateUrl: './studio-new.component.html',\r\n    styleUrls: ['./studio-new.component.css']\r\n})\r\nexport class StudioNewComponent implements OnInit {\r\n    \r\n    studioForm: FormGroup;\r\n    serviceForm: FormGroup;\r\n    imageForm: FormGroup;\r\n    newStudio: Studio = {\r\n        studioName: \"\",\r\n        location:  \"\",\r\n        type: \"\",\r\n        ownerUsername: \"\",\r\n        service:[]\r\n      };\r\n    businessTypes: string[] = ['makeup', 'hairdresser', 'all']; \r\n\r\n    constructor(private studioService: StudioService, private router: Router){\r\n        this.studioForm = new FormGroup({\r\n            'studioName': new FormControl('', Validators.required),\r\n            'type': new FormControl('', Validators.required),\r\n            'location': new FormControl('', Validators.required),\r\n            'ownerUsername': new FormControl('', Validators.required)\r\n        });\r\n\r\n        this.serviceForm = new FormGroup({\r\n            'title': new FormControl('', Validators.required),\r\n            'description': new FormControl('', Validators.required),\r\n        });\r\n        this.imageForm = new FormGroup({\r\n            'file': new FormControl(['']),\r\n          });\r\n       \r\n    }\r\n    ngOnInit(): void {\r\n       \r\n    }\r\n\r\n    addStudio(){\r\n        console.log(this.studioForm);\r\n        console.log(this.newStudio)\r\n        this.newStudio.location = this.studioForm.value.location,\r\n        this.newStudio.type = this.studioForm.value.type,\r\n        this.newStudio.ownerUsername =  this.studioForm.value.ownerUsername,\r\n        this.newStudio.studioName = this.studioForm.value.studioName,\r\n        //console.log(this.newStudio)\r\n        this.studioService.addStudio(this.newStudio);   \r\n    }\r\n\r\n    addService(){\r\n        const newService = {\r\n            title: this.serviceForm.value.title,\r\n            description: this.serviceForm.value.description,\r\n            reservations: []\r\n          };\r\n        console.log(newService)\r\n        this.newStudio.service.push(newService)\r\n    }\r\n\r\n    deleteService(title: String, description: String){\r\n        this.newStudio.service = this.newStudio.service.filter(service => !(service.title === title &&  service.description === description));\r\n    }\r\n    onFileChange(event: Event){\r\n\r\n    }\r\n    uploadImage(){\r\n        \r\n    }\r\n}","\r\n<div class=\"main-content\">\r\n<div class=\"blurred-background\"></div>\r\n    <mat-card>\r\n        <H2>Dodajemy studio</H2>\r\n        <form [formGroup]=\"studioForm\" (ngSubmit)=\"addStudio()\" type=\"\">\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Nazwa zakaładu</mat-label>\r\n                  <input autocomplete=\"off\" formControlName=\"studioName\" type=\"text\" matInput placeholder=\"Nazwa zakładu\">\r\n                </mat-form-field>\r\n            </p>\r\n\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Typ zakładu</mat-label>\r\n                  \r\n                  <mat-select formControlName=\"type\">\r\n                    <mat-option *ngFor=\"let type of businessTypes\" [value]=\"type\">{{ type }}</mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n            </p>\r\n            \r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Lokalizacja</mat-label>\r\n                    <input autocomplete=\"off\" formControlName=\"location\" type=\"text\" matInput placeholder=\"Lokalizacja\">\r\n                </mat-form-field>\r\n            </p>\r\n\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Właściciel</mat-label>\r\n                    <input autocomplete=\"off\" formControlName=\"ownerUsername\" type=\"text\" matInput placeholder=\"Właściciel\">\r\n                </mat-form-field>\r\n            </p>\r\n\r\n            <!-- <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Zdjęcie</mat-label>\r\n                    <input autocomplete=\"off\" formControlName=\"ownerUsername\" type=\"file\" matInput placeholder=\"Zdjęcie\">\r\n                    <button type=\"button\" >Upload Image</button>\r\n                </mat-form-field>\r\n            </p> -->\r\n            <!-- <form [formGroup]=\"imageForm\">\r\n                <mat-form-field>\r\n                  <mat-label>Upload Image</mat-label>\r\n                  <input type=\"file\" (change)=\"onFileChange($event)\" formControlName=\"file\">\r\n                </mat-form-field>\r\n                <button type=\"button\" (click)=\"uploadImage()\">Upload Image</button>\r\n              </form>\r\n            <p>Dodaj Usługi:</p> -->\r\n            \r\n            \r\n              \r\n             <div class=\"studio-card\" *ngFor=\"let service of newStudio.service\">\r\n                 <mat-card class=\"services-card\">\r\n                     <h5>{{ service.title }}</h5>\r\n                    <p>{{ service.description }}</p>\r\n                    <button mat-raised-button color=\"warn\" (click)=\"deleteService(service.title, service.description)\">Usuń</button>\r\n             </mat-card>\r\n                 <br>\r\n             </div>\r\n              \r\n               \r\n            <mat-card class=\"services-card\">\r\n                <form [formGroup]=\"serviceForm\" (ngSubmit)=\"addService()\" type=\"\">\r\n                    <h2>Tworzenie usługi</h2>\r\n                    <p>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Tytuł</mat-label>\r\n                            <input autocomplete=\"off\" formControlName=\"title\" type=\"text\" matInput placeholder=\"Tytuł\">\r\n                        </mat-form-field>\r\n                    </p>\r\n                    <p>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Opis</mat-label>\r\n                            <input autocomplete=\"off\" formControlName=\"description\" type=\"text\" matInput placeholder=\"Opis\">\r\n                        </mat-form-field>\r\n                    </p>\r\n                \r\n                    <button mat-raised-button color=\"primary\">Dodaj usługę</button>\r\n            </form>\r\n    \r\n        </mat-card>\r\n        <br>\r\n        <br>\r\n        <br>\r\n        <button mat-raised-button color=\"primary\">Dodaj biznes</button>\r\n        </form>\r\n        \r\n</mat-card>\r\n","<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\" integrity=\"sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\" crossorigin=\"anonymous\">\r\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\"></script>\r\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\r\n\r\n<nav class=\"navbar navbar-expand-md  custom-navbar sticky-top\">\r\n  <a class=\"navbar-brand custom-logo\" [routerLink]=\"['/studio-main-page', 'all']\">Booker</a>\r\n  <button class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navb\" aria-expanded=\"true\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div id=\"navb\" class=\"navbar-collapse collapse hide\">\r\n    <ul class=\"navbar-nav\">\r\n    \r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link custom-link\" [routerLink]=\"['/studio-main-page', 'hairdresser']\">Fryzjer</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link custom-link\" [routerLink]=\"['/studio-main-page', 'makeup']\">Makijaż</a>\r\n      </li>\r\n\r\n      <li *ngIf=\"(afAuth.user | async)\" class=\"nav-item\">\r\n        <a class=\"nav-link custom-link\" href=\"#\" routerLink=\"/studio-new\"><span class=\"fas fa-briefcase\"></span> Dodaj Biznes</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"nav navbar-nav ml-auto\">\r\n      \r\n      \r\n      <li *ngIf=\"!(afAuth.user | async)\" class=\"nav-item\">\r\n        <a class=\"nav-link custom-link\" href=\"#\" routerLink=\"/signup\"><span class=\"fas fa-user\"></span> Załóż konto</a>\r\n      </li>\r\n      <li *ngIf=\"!(afAuth.user | async)\" class=\"nav-item\">\r\n        <a class=\"nav-link custom-link\" href=\"#\" routerLink=\"/login\"><span class=\"fas fa-sign-in-alt\"></span> Zaloguj się</a>\r\n      </li>\r\n      <li *ngIf=\"user\" class=\"nav-item\">\r\n        <p class=\"nav-link custom-link\" >Witaj {{user.email}}! </p>\r\n      </li>\r\n      <li *ngIf=\"(afAuth.user | async)\" class=\"nav-item\" (click)=\"logout()\">\r\n        <a class=\"nav-link custom-link\" href=\"#\" routerLink=\"/login\" ><span class=\"fas fa-sign-in-alt\" ></span> Wyloguj</a>\r\n      </li>\r\n    \r\n    </ul>\r\n  </div>\r\n</nav>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport * as firebase from 'firebase/app'; // Import the 'firebase/app' module\r\n\r\n@Component({\r\n    selector: 'navbar',\r\n    templateUrl: './navbar.component.html',\r\n    styleUrls: ['./navbar.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n\r\n    user: firebase.default.User | null;\r\n\r\n    constructor(public afAuth: AngularFireAuth) {\r\n        \r\n      afAuth.authState.subscribe(user => {\r\n        this.user = user;\r\n      });\r\n    }\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    logout(): void {\r\n        this.afAuth.signOut();\r\n    }\r\n\r\n  \r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","Admin!\r\n\r\n<br>\r\n\r\n<button mat-raised-button color=\"primary\" routerLink=\"/home\">\r\n    Home\r\n</button>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'speedrun';\r\n}\r\n","<navbar></navbar>\r\n<router-outlet></router-outlet>\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { AngularFireDatabase } from '@angular/fire/database'; // Import AngularFireDatabase\r\n\r\nimport { Studio } from './model/studio.model';\r\nimport { Reservation } from './model/reservation.model';\r\nimport { Service } from './model/service.model';\r\nimport { Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudioService {\r\n    constructor(private db: AngularFireDatabase, private router: Router) {}\r\n\r\n    getStudios(): Observable<Studio[]> { // Specify the return type as User[]\r\n        return this.db.list('studios').valueChanges() as Observable<Studio[]>;\r\n      }\r\n\r\n      addStudio(studio: Studio) {\r\n        this.getNewId().then((newId) => {\r\n          this.db.list('studios').set(newId.toString(), studio)\r\n            .then(() => {\r\n              this.router.navigate(['/studio-main-page',studio.type]);      \r\n            })\r\n            .catch((error) => {\r\n              console.error('Error adding user:', error);\r\n            });\r\n        });\r\n      }\r\n    \r\n      getNewId(): Promise<number> {\r\n        return new Promise((resolve, reject) => {\r\n          this.db.list<number>('studios').query.once('value')\r\n            .then((snapshot) => {\r\n              let highestNumber = 0;\r\n    \r\n              snapshot.forEach((userSnapshot) => {\r\n                const userId = parseInt(userSnapshot.key, 10);\r\n                if (!isNaN(userId) && userId > highestNumber) {\r\n                  highestNumber = userId;\r\n                }\r\n              });\r\n    \r\n              const nextAvailableNumber = highestNumber + 1;\r\n              console.log('Next available number:', nextAvailableNumber);\r\n              resolve(nextAvailableNumber);\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error fetching user data:', error);\r\n              reject(error);\r\n            });\r\n        });\r\n      }\r\n      \r\n     addTestStudio(){\r\n        const reservations: Reservation[] = [\r\n            {\r\n              username: 'user1',\r\n              confirmed: true,\r\n              startDate: '2023-10-01 08:30',\r\n              endDate: '2023-10-01 09:00'\r\n            },\r\n            {\r\n              username: 'user2',\r\n              confirmed: false,\r\n              startDate: '2023-10-01 09:30',\r\n              endDate: '2023-10-01 10:00'\r\n            },\r\n            // Add more reservations as needed...\r\n          ];\r\n          \r\n          // Sample Service objects\r\n          const services: Service[] = [\r\n            {\r\n              title: 'Service 1',\r\n              description: 'Description for Service 1',\r\n              reservations: reservations,\r\n            },\r\n            {\r\n              title: 'Service 2',\r\n              description: 'Description for Service 2',\r\n              reservations: [],\r\n            },\r\n            // Add more services as needed...\r\n          ];\r\n          \r\n          // Sample Studio object\r\n          const studio: Studio = {\r\n            studioName: 'name',\r\n            type: 'Studio Type',\r\n            location: 'Studio Location',\r\n            ownerUsername: 'owner123',\r\n            service: services,\r\n          };\r\n              \r\n          // Add the test user using the service\r\n          this.addStudio(studio);\r\n     } \r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { StudioMainPageComponent } from './studio/studio-main-page.component';\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { environment } from '../app/environments/environment';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NavbarComponent } from 'src/navbar/navbar.component';\r\nimport { StudioNewComponent } from './studio/studio-new.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        SignupComponent,\r\n        LoginComponent,\r\n        DashboardComponent,\r\n        NavbarComponent,\r\n        StudioMainPageComponent,\r\n        StudioNewComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        BrowserAnimationsModule,\r\n\r\n        AngularFireModule.initializeApp(environment.firebaseConfig),  // imports firebase/app needed for everything\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCardModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    userLoggedIn: boolean;      // other components can check on this variable for the login status of the user\r\n\r\n    constructor(private router: Router, private afAuth: AngularFireAuth) {\r\n        this.userLoggedIn = false;\r\n\r\n        this.afAuth.onAuthStateChanged((user) => {              // set up a subscription to always know the login status of the user\r\n            if (user) {\r\n                this.userLoggedIn = true;\r\n            } else {\r\n                this.userLoggedIn = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser(email: string, password: string): Promise<any> {\r\n        return this.afAuth.signInWithEmailAndPassword(email, password)\r\n            .then(() => {\r\n                console.log('Auth Service: loginUser: success');\r\n                // this.router.navigate(['/dashboard']);\r\n            })\r\n            .catch(error => {\r\n                console.log('Auth Service: login error...');\r\n                console.log('error code', error.code);\r\n                console.log('error', error);\r\n                if (error.code)\r\n                    return { isValid: false, message: error.message };\r\n            });\r\n    }\r\n\r\n    signupUser(user: any): Promise<any> {\r\n        return this.afAuth.createUserWithEmailAndPassword(user.email, user.password)\r\n            .then((result) => {\r\n                let emailLower = user.email.toLowerCase();\r\n                result.user.sendEmailVerification();                    // immediately send the user a verification email\r\n            })\r\n            .catch(error => {\r\n                console.log('Auth Service: signup error', error);\r\n                if (error.code)\r\n                    return { isValid: false, message: error.message };\r\n            });\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service'\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\n@Component({\r\n    selector: 'app-signup',\r\n    templateUrl: './signup.component.html',\r\n    styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n    signupForm: FormGroup;\r\n    firebaseErrorMessage: string;\r\n\r\n    constructor(private authService: AuthService, private router: Router, private afAuth: AngularFireAuth) {\r\n        this.firebaseErrorMessage = '';\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.signupForm = new FormGroup({\r\n            'displayName': new FormControl('', Validators.required),\r\n            'email': new FormControl('', [Validators.required, Validators.email]),\r\n            'password': new FormControl('', Validators.required)\r\n        });\r\n    }\r\n\r\n    signup() {\r\n        if (this.signupForm.invalid)                            // if there's an error in the form, don't submit it\r\n            return;\r\n\r\n        this.authService.signupUser(this.signupForm.value).then((result) => {\r\n            if (result == null)                                 // null is success, false means there was an error\r\n                this.router.navigate(['/studio-main-page','all']);   \r\n            else if (result.isValid == false){\r\n                this.firebaseErrorMessage = result.message;\r\n            }\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n}\r\n","\r\n<div class=\"main-content\">\r\n    <div class=\"blurred-background\"></div>\r\n    <mat-card>\r\n        <h2>Utwórz nowe konto</h2> <!-- Added title -->\r\n        <form [formGroup]=\"signupForm\" (ngSubmit)=\"signup()\">\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Nazwa użytkownika</mat-label>\r\n                    <input autocomplete=\"off\" formControlName=\"displayName\" type=\"text\" matInput placeholder=\"Nazwa użytkownika\">\r\n                </mat-form-field>\r\n            </p>\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Email</mat-label>\r\n                    <input formControlName=\"email\" type=\"email\" matInput placeholder=\"Email\">\r\n                </mat-form-field>\r\n            </p>\r\n            <p>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Hasło</mat-label>\r\n                    <input autocomplete=\"off\" formControlName=\"password\" type=\"password\" matInput placeholder=\"Hasło\">\r\n                </mat-form-field>\r\n            </p>\r\n            <div *ngIf=\"firebaseErrorMessage != ''\" class=\"error-style\">\r\n                <span>{{ firebaseErrorMessage }}</span>\r\n            </div>\r\n    \r\n            <button mat-raised-button color=\"primary\">Zajerestruj</button>\r\n        </form>\r\n    </mat-card>\r\n  </div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\n\r\nimport { AuthGuard } from './services/auth.guard';\r\nimport { StudioMainPageComponent } from './studio/studio-main-page.component';\r\nimport { StudioNewComponent } from './studio/studio-new.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: 'studio-main-page/all', pathMatch: 'full' },\r\n    { path: 'studio-main-page/:studioType', component: StudioMainPageComponent },\r\n    { path: 'studio-new', component: StudioNewComponent, canActivate: [AuthGuard] },\r\n    { path: 'home', component: HomeComponent },\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'signup', component: SignupComponent },\r\n    { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\r\n    { path: '**', component: HomeComponent },                       // catch-all in case no other path matched\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service'\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { StudioService } from '../services/studio.service'; // Import your StudioService\r\nimport { Studio } from '../services/model/studio.model';\r\nimport { Service } from '../services/model/service.model';\r\nimport { Reservation } from '../services/model/reservation.model';\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    firebaseErrorMessage: string;\r\n\r\n    constructor(private authService: AuthService, private router: Router, private afAuth: AngularFireAuth, private studioService: StudioService) {\r\n        this.loginForm = new FormGroup({\r\n            'email': new FormControl('', [Validators.required, Validators.email]),\r\n            'password': new FormControl('', Validators.required)\r\n        });\r\n\r\n        this.firebaseErrorMessage = '';\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    loginUser() {\r\n\r\n       \r\n        if (this.loginForm.invalid)\r\n            return;\r\n\r\n        this.authService.loginUser(this.loginForm.value.email, this.loginForm.value.password).then((result) => {\r\n            if (result == null) {                               // null is success, false means there was an error\r\n                console.log('logging in...');\r\n                this.router.navigate(['/studio-main-page','all']);                // when the user is logged in, navigate them to dashboard\r\n            }\r\n            else if (result.isValid == false) {\r\n                console.log('login error', result);\r\n                this.firebaseErrorMessage = result.message;\r\n                this.router.navigate(['/studio-main-page','all']);   \r\n            }\r\n        });\r\n    }\r\n}\r\n","\r\n<div class=\"main-content\">\r\n    <div class=\"blurred-background\"></div>\r\n    <mat-card>\r\n        <h2>Zaloguj się, aby rozpocząć</h2> <!-- Added title -->\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser()\" type=\"\">\r\n                <p>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Email</mat-label>\r\n                        <input autocomplete=\"off\" formControlName=\"email\" type=\"email\" matInput placeholder=\"Email\">\r\n                    </mat-form-field>\r\n                </p>\r\n                <p>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Hasło</mat-label>\r\n                        <input autocomplete=\"off\" formControlName=\"password\" type=\"password\" matInput placeholder=\"Hasło\">\r\n                    </mat-form-field>\r\n                </p>\r\n                <div *ngIf=\"firebaseErrorMessage != ''\" class=\"error-style\">\r\n                    <span>{{ firebaseErrorMessage }}</span>\r\n                </div>\r\n        \r\n                <button mat-raised-button color=\"primary\">Zaloguj</button>\r\n            </form>\r\n        </mat-card>\r\n   \r\n</div>\r\n","export const environment = {\r\n    production: false,\r\n    firebaseConfig : {\r\n        apiKey: \"AIzaSyDbJ49nyz5Otq0XIl9dUjsTg9f-QtiJi78\",\r\n        authDomain: \"nailbooker.firebaseapp.com\",\r\n        databaseURL: \"https://nailbooker-default-rtdb.europe-west1.firebasedatabase.app\",\r\n        projectId: \"nailbooker\",\r\n        storageBucket: \"nailbooker.appspot.com\",\r\n        messagingSenderId: \"522130802424\",\r\n        appId: \"1:522130802424:web:e381bdf20e1e5a69ed1d0d\",\r\n        measurementId: \"G-MW030Y6MDN\"\r\n      }\r\n  };","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from '../src/app/environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}